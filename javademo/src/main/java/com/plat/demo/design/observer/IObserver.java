package com.plat.demo.design.observer;

/**
 * 观察者设计模式适合解决多种对象跟踪一个对象数据变化的程序结构问题，
 * 有一个称作“主题”的对象和若干个称作“观察者”的对象。
 *
 * 观察者设计模式可以从以下递推中得出一些重要结论。
 * ● 主题要知道有哪些观察者对其进行监测，因此主题类中一定有一个集合类成员变量，包含了观察者的对象集合。
 * ● 既然包含了观察者的对象集合，那么，观察者一定是多态的，有共同的父类接口。
 * ● 主题完成的主要功能是：可以添加观察者，可以撤销观察者，可以向观察者发消息，引起观察者响应。
 * 这三个功能是固定的，因此主题类可以从固定的接口派生。
 * 因此，编制观察者设计模式，要完成以下功能类的编制。
 * ● 主题ISubject接口定义。
 * ● 主题类编制。
 * ● 观察者接口IObserver定义。
 * ● 观察者类实现。
 */
public interface IObserver<T> {
  public void refresh(T data);
}
